Author: JJ Merelo <jjmerelo@gmail.com>
Title: Perl, my child, is love in Github Actions
Topic: GitHub actions

=pod

=encoding utf8

=head1 Perl, my child, is love in Github Actions

Santa saw Christmas was approaching and there was so much stuff to do already. A
lot of it had to do with quality assurance: were the newsletters added properly
to the repository? Did those newsletter include whatever needed to be included
in the first place? Were they properly formatted?

As any self-respecting christmas-coding shop, Santa used GitHub. And needed to
set up the QA pipelines properly. And fast. With Perl. And what's best to have
stuff dome quickly? Like tinsel in Christmas, boilerplate is what takes you
there.

=head2 Let's talk a bit about GitHub actions

There are several kinds of GitHub actions. You can create them using a Docker
container or JavaScript. But there's a thirds kind called L<composite
actions|https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-composite-action>. 

A composite action essentially is a combinations of several steps that might
include other actions or running scripts. You can basically include the whole
action in a single file, like this.

    name: 'Hello Perl'
    description: 'Simplest Perl composite action'
    branding:
      icon: 'briefcase'
      color: 'blue'
    inputs:
      action-input:
        description: 'What it is about'
        required: false # or not
        default: 'World'
    runs:
      using: "composite"
      steps:
        - run: print %ENV;
          shell: perl {0}
        - name: Print input
          env:
            TEMPLATE_INPUT: ${{ inputs.action-input}}
          run: print $ENV{'ACTION_INPUT'}
          shell: perl {0}

This is a very basic C<action.yml> file, that placed in your main directory will
simply print the environment variables to your GitHub actions visible log. Not a
great deal, useful if you want to know the values of certain variables. But it
can be used as first steps to any action, to debug it... and it uses Perl to do
so.

It's not very widely known, but you can add a `shell` key to any step in a
GitHub action so that it interpretes whatever is in the `run` step; the C<{0}>
will be substituted by the name of a (I guess) temporal file that contains the
step. So this is kinda

    perl possibly_temporary_file_that_contains_print_ENV.pl

(It might create a temporary file with a shebang and run it, TBH I don't
know)

But see, we're not using any kind of container or downloaded module or anything
else. Just the very basic stuff that's already there in the Ubuntu runner (and,
as far as I can tell, in other runners too).

You can go ahead and test it this way:

    name: Run basic action
    on:
      push:
    jobs:
      test:
        runs-on: ubuntu-latest
        name: Run basic action
        steps:
        - name: Run basic test
          uses: JJ/perl-advent-2024-test-action-1@main

(or whatever else you named it). It will simply print a wall of environment
variable names and values, badly formated. But the point is, it just works and
it's fast since it's not using anything that's not already in the Ubuntu runner.

Who said badly formatted? Maybe we can do it better? Right-on, let's use
L<JSON::PP>. Change the last step in C<action.yml> to:

     - run: |
         use JSON::PP;
         print JSON::PP->new->ascii->pretty->allow_nonref->encode( \%ENV );
       shell: perl {0}

This is going to be a bit nicer. But what gives? We're not using CPAN. Right,
there are quite a bit of CPAN modules already installed there, just like this
one. Since `perl` is there, and `cpan` too, you will have at least any module
that goes with any of them (CGI is no longer there, so you will not be able to
deploy a website while your action is running). L<JSON::PP> is one of those core
L<modules>, so no big deal.

What else is in there? A probably incomplete list is
L<here|https://gist.github.com/JJ/edf3a39d68525439978da2a02763d42b> but I am not
totally sure it's up to date; in fact, I I<know> that L<LWP::Protocol::https has
disappeared|https://github.com/actions/runner-images/issues/10567>, so there is
that. If I had to make broad categories of the modules we can find, there are
the Debian configuration related modules, L<LWP> and auxiliaries, C<git> and
HTML stuff, and odds and ends. There are enough goodies there that I would look
first before installing something via cpan, which takes time, you need to set up
a cache, and so on.

The caveat? All that is pretty much undocumented, so anything you rely on (as
the above mentioned C<LWP::Protocol::https> might disappear from one version of
the runner to the next.


=cut
