Author: JJ Merelo <jjmerelo@gmail.com>
Title: Perl, my child, is love in Github Actions
Topic: GitHub actions

=pod

=encoding utf8

=head1 Perl, my child, is love in Github Actions

Santa saw Christmas was approaching and there was so much stuff to do already. A
lot of it had to do with quality assurance: were the newsletters added properly
to the repository? Did those newsletter include whatever needed to be included
in the first place? Were they properly formatted?

As any self-respecting christmas-coding shop, Santa used GitHub. And needed to
set up the QA pipelines properly. And fast. With Perl. And what's best to have
stuff dome quickly? Like tinsel in Christmas, boilerplate is what takes you
there.

=head2 Let's talk a bit about GitHub actions

There are several kinds of GitHub actions. You can create them using a Docker
container or JavaScript. But there's a thirds kind called L<composite
actions|https://docs.github.com/en/actions/sharing-automations/creating-actions/creating-a-composite-action>. 

A composite action essentially is a combinations of several steps that might
include other actions or running scripts. You can basically include the whole
action in a single file, like this.

    name: 'Hello Perl'
    description: 'Simplest Perl composite action'
    branding:
      icon: 'briefcase'
      color: 'blue'
    inputs:
      action-input:
        description: 'What it is about'
        required: false # or not
        default: 'World'
    runs:
      using: "composite"
      steps:
        - uses: actions/checkout@v4
        - run: print %ENV;
          shell: perl {0}
        - name: Print input
          env:
            TEMPLATE_INPUT: ${{ inputs.action-input}}
          run: print $ENV{'ACTION_INPUT'}
          shell: perl {0}





=cut
