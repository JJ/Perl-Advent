Author: Mohammad Anwar <mohammad.anwar@yahoo.com>
Title: Introduction to App::Timer
Topic: App::Timer

=encoding utf8

=head2 Background

So what is it that I am going to talk about today?

As you all know I have L<handful of distributions|https://metacpan.org/author/MANWAR>
available on C<MetaCPAN>. Although I am not actively managing any of them but I do
look after them as and when needed.

If you look at the list of my distributions, you would notice that some of them are
just plain application i.e. something that can be executed at the command prompt. One
of them, e.g. L<App::Calendr>. Every time, I run an application, I always wanted to
know how long it took to complete the execution.

For many years, I used to add the following snippets at the end of my command line
application script.

    END {
        my $time = time - $^T;
        my $mm   = $time / 60;
        my $ss   = $time % 60;
        my $hh   = $mm / 60;

        printf("The program ran for %02d:%02d:%02d.\n", $hh, $mm%60, $ss);
    }

=head2 Proposals

Can I do something that works for every command line applications?

Well, I gave a deep thought one weekend and ended up quick and dirty solution, L<App::Timer>.

To be honest, there is no C<Rocket Science> behind it. However it is very handy and help me
with all my command line applications.

There are C<2 ways> you can have the timer added to your application.

=head3 Import the module

You can simply add one line C<use App::Timer> at the top and you are done.

=head3 Command line switch

Not always you want to touch the application source code, so you can use the command line
switch instead as below:

    $ perl -MApp::Timer your-application.pl

C<Perl> being the C<Perl>, you can get away not doing any of the above and simply do this:

    $ time perl your-application.pl

That's it for today, have an enjoyable holiday break.
